name: "Full-Stack Development Workflow"
version: "1.2.0"
description: "Complete development pipeline for FastAPI + Next.js application with DevQ.ai standards"
author: "DevQ.ai Team"
tags: ["fullstack", "fastapi", "nextjs", "development", "devq-ai"]

variables:
  project_name: "devgen-app"
  environment: "development"
  api_port: "8000"
  frontend_port: "3000"
  database_url: "postgresql://localhost:5432/devgen_db"
  redis_url: "redis://localhost:6379"

metadata:
  min_version: "1.0.0"
  dependencies: ["docker", "nodejs", "python", "postgresql"]
  environment:
    NODE_ENV: "development"
    PYTHONPATH: "./src"
    LOGFIRE_TOKEN: "${LOGFIRE_TOKEN}"
  documentation: "https://docs.devq.ai/workflows/fullstack"
  license: "MIT"

branches:
  - name: "infrastructure-setup"
    description: "Initialize infrastructure services and dependencies"
    parallel: false
    max_retries: 2
    timeout: "10m"
    environment:
      COMPOSE_PROJECT_NAME: "${project_name}"

    steps:
      - name: "check-prerequisites"
        agent: "system-checker"
        action: "verify system requirements and dependencies"
        condition: "start"
        timeout: "2m"
        parameters:
          required_tools: ["docker", "docker-compose", "node", "python3", "git"]
          min_versions:
            docker: "20.0.0"
            node: "18.0.0"
            python: "3.11.0"
        artifacts:
          - name: "system-report"
            path: "./reports/system-check.json"
            type: "json"
            description: "System requirements validation report"

      - name: "start-database"
        agent: "database-manager"
        action: "start PostgreSQL database with initial schema"
        condition: "prerequisites-checked"
        timeout: "5m"
        retries: 3
        parameters:
          database_name: "devgen_db"
          port: 5432
          schema_path: "./sql/schema.sql"
          init_data: "./sql/seed.sql"
        environment:
          POSTGRES_PASSWORD: "devgen_password"
          POSTGRES_USER: "devgen_user"
        artifacts:
          - name: "database-logs"
            path: "./logs/postgres.log"
            type: "log"
            required: false

      - name: "start-redis"
        agent: "cache-manager"
        action: "start Redis cache server"
        condition: "prerequisites-checked"
        timeout: "3m"
        parameters:
          port: 6379
          config_file: "./config/redis.conf"
        artifacts:
          - name: "redis-logs"
            path: "./logs/redis.log"
            type: "log"

      - name: "verify-services"
        agent: "health-checker"
        action: "verify all infrastructure services are healthy"
        condition: "database-started"
        depends: ["start-database", "start-redis"]
        timeout: "2m"
        parameters:
          endpoints:
            - url: "postgresql://localhost:5432/devgen_db"
              type: "database"
            - url: "redis://localhost:6379"
              type: "cache"

    on_success:
      - type: "log"
        parameters:
          message: "Infrastructure setup completed successfully"
          level: "info"
      - type: "notify"
        parameters:
          channel: "slack"
          message: "ðŸš€ Infrastructure is ready for ${project_name}"

    on_failure:
      - type: "cleanup"
        parameters:
          services: ["database", "redis"]
      - type: "log"
        parameters:
          message: "Infrastructure setup failed"
          level: "error"

  - name: "backend-development"
    description: "Set up and start FastAPI backend services"
    parallel: false
    timeout: "15m"
    prerequisites: ["infrastructure-setup"]

    steps:
      - name: "setup-python-env"
        agent: "python-manager"
        action: "create virtual environment and install dependencies"
        condition: "services-verified"
        timeout: "5m"
        parameters:
          python_version: "3.11"
          requirements_file: "./backend/requirements.txt"
          venv_path: "./backend/venv"
        environment:
          PIP_CACHE_DIR: "./cache/pip"
        artifacts:
          - name: "pip-install-log"
            path: "./logs/pip-install.log"
            type: "log"

      - name: "run-database-migrations"
        agent: "migration-runner"
        action: "execute database migrations using Alembic"
        condition: "python-env-ready"
        timeout: "3m"
        parameters:
          migration_path: "./backend/alembic"
          database_url: "${database_url}"
        artifacts:
          - name: "migration-log"
            path: "./logs/migrations.log"
            type: "log"

      - name: "start-fastapi-server"
        agent: "fastapi-server"
        action: "start FastAPI development server with hot reload"
        condition: "migrations-complete"
        timeout: "3m"
        parameters:
          app_module: "main:app"
          host: "0.0.0.0"
          port: "${api_port}"
          reload: true
          log_level: "info"
        environment:
          DATABASE_URL: "${database_url}"
          REDIS_URL: "${redis_url}"
          LOGFIRE_TOKEN: "${LOGFIRE_TOKEN}"
        artifacts:
          - name: "fastapi-logs"
            path: "./logs/fastapi.log"
            type: "log"

      - name: "run-backend-tests"
        agent: "pytest-runner"
        action: "execute backend test suite with coverage"
        condition: "fastapi-started"
        timeout: "5m"
        parameters:
          test_path: "./backend/tests"
          coverage_threshold: 90
          pytest_args: ["--cov=src", "--cov-report=html", "--cov-report=term"]
        artifacts:
          - name: "test-results"
            path: "./reports/pytest-results.xml"
            type: "xml"
          - name: "coverage-report"
            path: "./reports/coverage.html"
            type: "html"

    hooks:
      pre_execution:
        - type: "backup"
          parameters:
            source: "./backend/src"
            destination: "./backups/backend-${timestamp}.tar.gz"

      on_error:
        - type: "collect_logs"
          parameters:
            paths: ["./logs/*.log"]
            output: "./debug/backend-error-${timestamp}.zip"

  - name: "frontend-development"
    description: "Set up and start Next.js frontend application"
    parallel: true  # Can run in parallel with backend
    timeout: "12m"

    steps:
      - name: "install-node-dependencies"
        agent: "npm-manager"
        action: "install Node.js dependencies and setup project"
        condition: "start"  # Can start immediately
        timeout: "7m"
        parameters:
          package_manager: "npm"
          install_args: ["--legacy-peer-deps"]
          package_file: "./frontend/package.json"
        environment:
          NODE_ENV: "development"
          NPM_CONFIG_CACHE: "./cache/npm"
        artifacts:
          - name: "npm-install-log"
            path: "./logs/npm-install.log"
            type: "log"

      - name: "setup-environment-config"
        agent: "config-manager"
        action: "create and validate environment configuration"
        condition: "dependencies-installed"
        timeout: "1m"
        parameters:
          template_file: "./frontend/.env.template"
          output_file: "./frontend/.env.local"
          variables:
            NEXT_PUBLIC_API_URL: "http://localhost:${api_port}"
            NEXT_PUBLIC_APP_NAME: "${project_name}"

      - name: "run-type-checking"
        agent: "typescript-checker"
        action: "run TypeScript type checking and linting"
        condition: "environment-configured"
        timeout: "3m"
        parameters:
          config_file: "./frontend/tsconfig.json"
          eslint_config: "./frontend/.eslintrc.json"
        artifacts:
          - name: "type-check-results"
            path: "./reports/typescript-check.log"
            type: "log"

      - name: "start-nextjs-server"
        agent: "nextjs-server"
        action: "start Next.js development server with hot reload"
        condition: "type-checking-passed"
        timeout: "3m"
        parameters:
          port: "${frontend_port}"
          dev_mode: true
          turbo: true
        environment:
          NEXT_PUBLIC_API_URL: "http://localhost:${api_port}"
        artifacts:
          - name: "nextjs-logs"
            path: "./logs/nextjs.log"
            type: "log"

      - name: "run-frontend-tests"
        agent: "jest-runner"
        action: "execute frontend test suite with coverage"
        condition: "nextjs-started"
        timeout: "4m"
        parameters:
          config_file: "./frontend/jest.config.js"
          coverage: true
          watch: false
        artifacts:
          - name: "jest-results"
            path: "./reports/jest-results.json"
            type: "json"

  - name: "integration-testing"
    description: "Run end-to-end integration tests"
    parallel: false
    timeout: "10m"
    prerequisites: ["backend-development", "frontend-development"]

    steps:
      - name: "wait-for-services"
        agent: "service-waiter"
        action: "wait for all services to be ready"
        condition: "frontend-tests-passed"
        depends: ["run-backend-tests", "run-frontend-tests"]
        timeout: "2m"
        parameters:
          endpoints:
            - url: "http://localhost:${api_port}/health"
              method: "GET"
              expected_status: 200
            - url: "http://localhost:${frontend_port}"
              method: "GET"
              expected_status: 200

      - name: "run-integration-tests"
        agent: "playwright-runner"
        action: "execute end-to-end integration tests"
        condition: "services-ready"
        timeout: "8m"
        parameters:
          config_file: "./tests/playwright.config.ts"
          browser: "chromium"
          headless: true
          base_url: "http://localhost:${frontend_port}"
        environment:
          API_BASE_URL: "http://localhost:${api_port}"
        artifacts:
          - name: "e2e-test-results"
            path: "./reports/playwright-results.html"
            type: "html"
          - name: "test-screenshots"
            path: "./reports/screenshots/"
            type: "directory"

      - name: "performance-testing"
        agent: "k6-runner"
        action: "run performance tests against API endpoints"
        condition: "integration-tests-passed"
        timeout: "5m"
        parameters:
          script_file: "./tests/performance/api-load-test.js"
          virtual_users: 10
          duration: "2m"
        artifacts:
          - name: "performance-report"
            path: "./reports/k6-performance.html"
            type: "html"

  - name: "monitoring-setup"
    description: "Configure monitoring and observability"
    parallel: true
    timeout: "8m"

    steps:
      - name: "setup-logfire-monitoring"
        agent: "logfire-configurator"
        action: "configure Logfire observability for all services"
        condition: "start"
        timeout: "3m"
        parameters:
          services: ["fastapi", "nextjs"]
          log_level: "info"
          capture_headers: true
          capture_body: false
        environment:
          LOGFIRE_TOKEN: "${LOGFIRE_TOKEN}"

      - name: "configure-health-checks"
        agent: "health-monitor"
        action: "set up comprehensive health monitoring"
        condition: "start"
        timeout: "2m"
        parameters:
          endpoints:
            - name: "api-health"
              url: "http://localhost:${api_port}/health"
              interval: "30s"
            - name: "database-health"
              url: "${database_url}"
              interval: "60s"
              type: "database"
          alerting:
            enabled: true
            channels: ["email", "slack"]

      - name: "setup-metrics-dashboard"
        agent: "dashboard-creator"
        action: "create development metrics dashboard"
        condition: "health-checks-configured"
        timeout: "3m"
        parameters:
          dashboard_type: "grafana"
          metrics_sources: ["logfire", "postgresql", "redis"]
          panels: ["response_time", "error_rate", "throughput", "resource_usage"]

    on_complete:
      - type: "generate_report"
        parameters:
          template: "./templates/development-report.md"
          output: "./reports/development-setup-report.md"
          include_artifacts: true

created_at: 2024-01-15T10:30:00Z
updated_at: 2024-01-15T10:30:00Z
